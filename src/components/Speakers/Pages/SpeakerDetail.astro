---
import BaseLayout from "../../../components/Common/BaseLayout.astro";
import SpeakersLinks from "../../../components/Speakers/SpeakersLinks.astro";
import { WebsiteConfig } from "../../../config";
import { getLangFromUrl, useTranslatedPath, useTranslations } from "../../../i18n/utils";
import { type Speaker } from "../../../data/types/sessionize";
import SessionTopic from "../../Sessions/SessionTopic.astro";
import { getSpeakers } from "../../../data/repositories/sessionize_repository";
// 1. Generate a new path for every collection speaker

interface Props {
  speaker: Speaker;
}

export async function getSpeakerPaths() {
  const speakerEntries = await getSpeakers(true);
  return speakerEntries.map((speaker) => ({
    params: { slug: speaker.slug },
    props: { speaker },
  }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const getPath = useTranslatedPath(lang);

// 2. When it's time to render, you can get the speaker directly from the prop
const { speaker }: Props = Astro.props;
const pageTitle = `${speaker.fullName} @ ${WebsiteConfig.DEVFEST_NAME}`;
---

<BaseLayout
  pageTitle={pageTitle}
  pageUiTitle={t("speakers.detailTitle")}
  pageDescription={speaker.bio}
>
  <div class="flex flex-col text-white">
    <div class="flex md:flex-row flex-col items-center mb-10">
      <div class="flex-none w-40 mb-2">
        <img
          src={speaker.profilePicture}
          alt={speaker.fullName}
          class="rounded-full"
        />
      </div>
      <div class="flex-1 pl-6 flex flex-col md:items-start items-center">
        <h2 class="text-4xl mb-1">{speaker.fullName}</h2>
        <p class="text-lg mb-3">{speaker.tagLine}</p>
        <!-- 
        {
          speaker.data.community != null && (
            <div class="py-1 px-2 rounded-sm bg-green-600 text-white">
              {speaker.data.community}
            </div>
          )
        } -->
        <div class="py-2"></div>
        <SpeakersLinks links={speaker.links} />
      </div>
    </div>
    <p style="white-space: pre-wrap;">{speaker.bio}</p>

    <div class="mt-5">
      <h3 class="text-3xl font-bold mb-4">{t("speakers.sessionList")}</h3>
      <ul class="flex flex-col gap-2">
        {
          speaker.sessions &&
            speaker.sessions!.map((session) => {
              const dateStart = new Date(session.startsAt);
              const dateEnd = new Date(session.endsAt);

              const date = dateStart.toLocaleDateString(lang, {
                timeZone: WebsiteConfig.EVENT_TIMEZONE,
                month: "long",
                day: "numeric",
              });
              const startTime = dateStart.toLocaleTimeString(lang, {
                timeZone: WebsiteConfig.EVENT_TIMEZONE,
                hour: "numeric",
                minute: "numeric",
              });

              const endTime = dateEnd.toLocaleTimeString(lang, {
                timeZone: WebsiteConfig.EVENT_TIMEZONE,
                hour: "numeric",
                minute: "numeric",
              });
              const isScheduled = dateStart.getTime() > 0;
              return (
                <a class="not-colored flex flex-col" href={getPath(`/sessions/${session.slug}`)}>
                  <p class="text-xl font-medium"> {session.title}</p>
                  {isScheduled && (
                    <p>
                      {date}, {startTime} - {endTime}
                    </p>
                  )}
                  <p>{session.room}</p>
                </a>
                <div class="flex gap-3 mt-3">
                  {session.topics.map((t) => (
                    <SessionTopic brightness="dark" topic={t} />
                  ))}
                </div>
              );
            })
        }
      </ul>
    </div>
  </div>
</BaseLayout>
